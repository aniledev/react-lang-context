{"version":3,"sources":["languageSpecificCopy.js","Components/LanguageContext.js","Components/GreatGrandChild.js","Components/GrandChild.js","Components/Child.js","Components/LangControls.js","Components/AppLang.js","index.js"],"names":["languageSpecificCopy","es","title","body","ko","LanguageContext","React","createContext","lang","window","navigator","language","GreatGrandChild","copy","this","context","className","Component","contextType","GrandChild","Child","role","LangControls","props","Consumer","value","onClick","onSetLang","disabled","aria-label","AppLang","state","handleSetLang","setState","contextValue","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAoBeA,G,MAlBc,CAC3BC,GAAI,CACFC,MAAO,mBACPC,KACE,2PAEJ,QAAS,CACPD,MAAO,WACPC,KACE,wMAEJC,GAAI,CACFF,MAAO,yCACPC,KACE,uhBCPSE,EAJSC,IAAMC,cAAc,CAC1CC,KAAMC,OAAOC,UAAUC,WCCnBC,E,uKAQF,IAAMC,EAAOb,EAAqBc,KAAKC,QAAQP,OAAS,GACxD,OACE,0BAASQ,UAAU,kBAAnB,UACE,6BAAKH,EAAKX,QACV,4BAAIW,EAAKV,c,GAZac,aAAxBL,EAEGM,YAAcb,EAgBRO,QCpBA,SAASO,IACtB,OACE,qBAAKH,UAAU,aAAf,SACE,cAAC,EAAD,MCHS,SAASI,IACtB,OACE,sBAAMC,KAAK,OAAOL,UAAU,QAA5B,SACE,cAACG,EAAD,MCFS,SAASG,EAAaC,GACnC,OAGE,aAFA,CAEC,EAAgBC,SAAjB,UACG,SAACC,GACA,OACE,qCACE,yBACEC,QAAS,kBAAMH,EAAMI,UAAU,OAC/BC,SAAyB,OAAfH,EAAMjB,KAFlB,oBAIU,IACR,sBAAMa,KAAK,MAAMQ,aAAW,QAA5B,yCAIF,yBACEH,QAAS,kBAAMH,EAAMI,UAAU,UAC/BC,SAAyB,UAAfH,EAAMjB,KAFlB,qBAIW,IACT,sBAAMa,KAAK,MAAMQ,aAAW,QAA5B,yCAIF,yBACEH,QAAS,kBAAMH,EAAMI,UAAU,OAC/BC,SAAyB,OAAfH,EAAMjB,KAFlB,mBAIS,IACP,sBAAMa,KAAK,MAAMQ,aAAW,KAA5B,+C,IC9BOC,E,4MACnBC,MAAQ,CACNvB,KAAMC,OAAOC,UAAUC,U,EAGzBqB,cAAgB,SAACxB,GACf,EAAKyB,SAAS,CAAEzB,U,uDAIhB,IAAM0B,EAAe,CACnB1B,KAAMM,KAAKiB,MAAMvB,MAGnB,OACE,cAAC,EAAgB2B,SAAjB,CAA0BV,MAAOS,EAAjC,SACE,sBAAKlB,UAAU,UAAf,UACE,cAACM,EAAD,CAAcK,UAAWb,KAAKkB,gBAC9B,cAACZ,EAAD,a,GAlB2BH,aCFrCmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.25190ff1.chunk.js","sourcesContent":["// the file containing an object of the text we can display for each language\n\nconst languageSpecificCopy = {\n  es: {\n    title: \"¬°Bienvenidos!\",\n    body:\n      \"Esta aplicaci√≥n del lado del cliente est√° hecha usando React. Haga clic en uno de los botones de arriba para ver c√≥mo el sitio cambia de idioma. Culpe a todas las traducciones defectuosas en Google Translate. Hecho con amor por @aniledev.\",\n  },\n  \"en-US\": {\n    title: \"Welcome!\",\n    body:\n      \"This client-side application is made using React. Click one of the buttons above to watch the site change languages. Blame all faulty translations on Google Translate. Made with love by @aniledev.\",\n  },\n  ko: {\n    title: \"Ïñ¥ÏÑú Ïò§Ïã≠ÏãúÏò§!\",\n    body:\n      \"Ïù¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÄ ReactÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÎßåÎì§Ïñ¥Ï°åÏäµÎãàÎã§. ÏÇ¨Ïù¥Ìä∏ Ïñ∏Ïñ¥ Î≥ÄÍ≤ΩÏùÑ Î≥¥Î†§Î©¥ ÏúÑÏùò Î≤ÑÌäº Ï§ë ÌïòÎÇòÎ•º ÌÅ¥Î¶≠ÌïòÏã≠ÏãúÏò§. Google Î≤àÏó≠Ïùò Î™®Îì† ÏûòÎ™ªÎêú Î≤àÏó≠ÏùÑ ÎπÑÎÇúÌïòÏã≠ÏãúÏò§. @aniledevÏùò ÏÇ¨ÎûëÏúºÎ°ú ÎßåÎì§Ïñ¥Ï°åÏäµÎãàÎã§..\",\n  },\n};\n\nexport default languageSpecificCopy;\n","// use this component to creat context for the language\n// contet should be in its own file so it can be imported into any other file\n\nimport React from \"react\";\n\nconst LanguageContext = React.createContext({\n  lang: window.navigator.language,\n});\n\nexport default LanguageContext;\n","//  In order to use context this will need to be a class component.\n// this component will render the text in different languages based on language controls\n\nimport React, { Component } from \"react\";\nimport languageSpecificCopy from \"../languageSpecificCopy\";\nimport LanguageContext from \"./LanguageContext\";\n\nclass GreatGrandChild extends Component {\n  // attach context to class component; assign context to static property called contextType, gives us a new instance property this.context\n  static contextType = LanguageContext;\n\n  render() {\n    // We're using an \"or an empty object\" logic when creating the copy constant with the syntax || {}\n    // similar to default props but the data file is not a prop that we can use\n    // if we attempt to use a key that doesn't exist, it would equate to undefined and this would throw errors all over our app\n    const copy = languageSpecificCopy[this.context.lang] || {};\n    return (\n      <section className=\"GreatGrandChild\">\n        <h2>{copy.title}</h2>\n        <p>{copy.body}</p>\n      </section>\n    );\n  }\n}\n\nexport default GreatGrandChild;\n","// this component simply renders the GreatGrandChild component\n\nimport React from \"react\";\nimport GreatGrandChild from \"../Components/GreatGrandChild\";\n\nexport default function GrandChild() {\n  return (\n    <div className=\"GrandChild\">\n      <GreatGrandChild />\n    </div>\n  );\n}\n","// this component simply renders the GrandChild component\n\nimport React from \"react\";\nimport GrandChild from \"../Components/GrandChild\";\n\nexport default function Child() {\n  return (\n    <main role=\"main\" className=\"Child\">\n      <GrandChild />\n    </main>\n  );\n}\n","// this component contains buttons to switch the current language\n// Consumer allows us to use context in function components\n\nimport React from \"react\";\nimport LanguageContext from \"./LanguageContext\";\n\nexport default function LangControls(props) {\n  return (\n    //renderProp acts like a combination of a callback prop and a child prop\n    // move the JSX we want to return into the return from the render\n    <LanguageContext.Consumer>\n      {(value) => {\n        return (\n          <>\n            <button\n              onClick={() => props.onSetLang(\"es\")}\n              disabled={value.lang === \"es\"}\n            >\n              Spanish{\" \"}\n              <span role=\"img\" aria-label=\"en-GB\">\n                üá™üá∏\n              </span>\n            </button>\n            <button\n              onClick={() => props.onSetLang(\"en-US\")}\n              disabled={value.lang === \"en-US\"}\n            >\n              American{\" \"}\n              <span role=\"img\" aria-label=\"en-US\">\n                üá∫üá∏\n              </span>\n            </button>\n            <button\n              onClick={() => props.onSetLang(\"ko\")}\n              disabled={value.lang === \"ko\"}\n            >\n              Korean{\" \"}\n              <span role=\"img\" aria-label=\"ko\">\n                üá∞üá∑\n              </span>\n            </button>\n          </>\n        );\n      }}\n    </LanguageContext.Consumer>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"../Styles/AppLang.css\";\nimport Child from \"./Child\";\nimport LangControls from \"./LangControls\";\nimport LanguageContext from \"./LanguageContext\";\n\n// wrap the subtree that needs the updated context values in the LanguageContext.Provider\nexport default class AppLang extends Component {\n  state = {\n    lang: window.navigator.language,\n  };\n\n  handleSetLang = (lang) => {\n    this.setState({ lang });\n  };\n\n  render() {\n    const contextValue = {\n      lang: this.state.lang,\n    };\n\n    return (\n      <LanguageContext.Provider value={contextValue}>\n        <div className=\"AppLang\">\n          <LangControls onSetLang={this.handleSetLang} />\n          <Child />\n        </div>\n      </LanguageContext.Provider>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles/index.css\";\nimport AppLang from \"./Components/AppLang\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppLang />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}